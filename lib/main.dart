// lib/main.dart
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

// --- SUPABASE INITIALIZATION ---
Future<void> main() async {
  // Ensure Flutter is ready
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Supabase
  await Supabase.initialize(
    url: 'https://vmwtukopjvxwgjaybpyr.supabase.co',
    anonKey:
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtd3R1a29wanZ4d2dqYXlicHlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwNjA3MDEsImV4cCI6MjA2ODYzNjcwMX0.X6-lBioj26lKNPbWLB9uK7MlYFI5o5XJdBSBv2ERblI',
  );
  runApp(const MyApp());
}

// --- APP ROOT WIDGET ---
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Supabase Student App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      // Start with the screen that shows the list of students
      home: const FetchStudentScreen(),
    );
  }
}

// --- DATA MODEL ---
class Student {
  final int? id; // id is usually nullable as it's generated by the database
  final String name;
  final String phoneNumber;
  final String email;
  final int rollNumber;
  final String address;

  Student({
    this.id,
    required this.name,
    required this.phoneNumber,
    required this.email,
    required this.rollNumber,
    required this.address,
  });

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'phone': phoneNumber,
      'email': email,
      'roll': rollNumber,
      'address': address,
    };
  }

  factory Student.fromMap(Map<String, dynamic> map) {
    return Student(
      id: map['id'] as int?,
      name: map['name'] as String,
      phoneNumber: map['phone'] as String,
      email: map['email'] as String,
      rollNumber: map['roll'] as int,
      address: map['address'] as String,
    );
  }
}

// --- DATA SERVICE / REPOSITORY ---
class StudentRepository {
  final _client = Supabase.instance.client;

  Stream<List<Student>> fetchRealTimeData() {
    // This is the correct way to handle the stream
    return _client
        .from('Student')
        .stream(primaryKey: ['id'])
        .map((data) => data.map((map) => Student.fromMap(map)).toList())
        .handleError((error) {
      debugPrint("Stream Error: $error");
      // Optionally, you could add an error state to your stream
    });
  }

  Future<void> insertData({required Student student}) async {
    await _client.from('Student').insert(student.toMap());
  }
}

// --- UI SCREEN: FETCH STUDENTS ---
class FetchStudentScreen extends StatefulWidget {
  const FetchStudentScreen({super.key});

  @override
  State<FetchStudentScreen> createState() => _FetchStudentScreenState();
}

class _FetchStudentScreenState extends State<FetchStudentScreen> {
  final StudentRepository _studentRepository = StudentRepository();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Student List'),
        centerTitle: true,
      ),
      body: StreamBuilder<List<Student>>(
        stream: _studentRepository.fetchRealTimeData(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          }
          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text("No students found."));
          }

          final students = snapshot.data!;
          return ListView.builder(
            itemCount: students.length,
            itemBuilder: (context, index) {
              final student = students[index];
              return ListTile(
                leading: CircleAvatar(child: Text(student.rollNumber.toString())),
                title: Text(student.name),
                subtitle: Text(student.email),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.of(context).push(
            MaterialPageRoute(builder: (context) => const InsertStudentScreen()),
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

// --- UI SCREEN: INSERT STUDENT ---
class InsertStudentScreen extends StatefulWidget {
  const InsertStudentScreen({super.key});

  @override
  State<InsertStudentScreen> createState() => _InsertStudentScreenState();
}

class _InsertStudentScreenState extends State<InsertStudentScreen> {
  final _studentRepository = StudentRepository();
  final _formKey = GlobalKey<FormState>();

  final _nameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _rollController = TextEditingController();
  final _addressController = TextEditingController();

  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _rollController.dispose();
    _addressController.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    // Validate the form
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() => _isLoading = true);

    try {
      final student = Student(
        name: _nameController.text.trim(),
        phoneNumber: _phoneController.text.trim(),
        email: _emailController.text.trim(),
        rollNumber: int.parse(_rollController.text.trim()),
        address: _addressController.text.trim(),
      );

      await _studentRepository.insertData(student: student);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student added successfully!')),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to add student: ${e.toString()}'),
            backgroundColor: Theme.of(context).colorScheme.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Student'),
      ),
      body: Form(
        key: _formKey,
        child: ListView( // Use ListView for better layout and scrolling
          padding: const EdgeInsets.all(16.0),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Name'),
              validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _phoneController,
              decoration: const InputDecoration(labelText: 'Phone Number'),
              keyboardType: TextInputType.phone,
              validator: (value) => value!.isEmpty ? 'Please enter a phone number' : null,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
              keyboardType: TextInputType.emailAddress,
              validator: (value) => value!.isEmpty ? 'Please enter an email' : null,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _rollController,
              decoration: const InputDecoration(labelText: 'Roll Number'),
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value!.isEmpty) return 'Please enter a roll number';
                if (int.tryParse(value) == null) return 'Please enter a valid number';
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _addressController,
              decoration: const InputDecoration(labelText: 'Address'),
              validator: (value) => value!.isEmpty ? 'Please enter an address' : null,
            ),
            const SizedBox(height: 24),
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : FilledButton(
              onPressed: _submit,
              child: const Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}